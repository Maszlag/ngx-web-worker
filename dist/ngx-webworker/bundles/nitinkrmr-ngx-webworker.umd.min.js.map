{"version":3,"sources":["ng://@nitinkrmr/ngx-webworker/lib/webworker.service.ts"],"names":["WebworkerService","this","workerFunctionToUrlMap","WeakMap","promiseToWorkerMap","prototype","run","workerFunction","data","enableAsync","url","getOrCreateWorkerUrl","runUrl","worker","Worker","promise","createPromiseForWorker","promiseCleaner","createPromiseCleaner","set","then","catch","terminate","removePromise","getWorker","get","Promise","resolve","reject","addEventListener","event","postMessage","fn","has","createWorkerUrl","resolveString","toString","blob","Blob","type","URL","createObjectURL","_this","delete","Injectable"],"mappings":"sUAAA,IAAAA,EAAA,WAIA,SAAAA,IAEUC,KAAAC,uBAAyB,IAAIC,QAC7BF,KAAAG,mBAAqB,IAAID,QAsEnC,OApEEH,EAAAK,UAAAC,IAAA,SAAOC,EAAmCC,EAAYC,OAC9CC,EAAMT,KAAKU,qBAAqBJ,EAAgBE,GACtD,OAAOR,KAAKW,OAAOF,EAAKF,IAG1BR,EAAAK,UAAAO,OAAA,SAAOF,EAAaF,OACZK,EAAS,IAAIC,OAAOJ,GACpBK,EAAUd,KAAKe,uBAAuBH,EAAQL,GAC9CS,EAAiBhB,KAAKiB,qBAAqBH,GAMjD,OAJAd,KAAKG,mBAAmBe,IAAIJ,EAASF,GAErCE,EAAQK,KAAKH,GAAgBI,MAAMJ,GAE5BF,GAGTf,EAAAK,UAAAiB,UAAA,SAAaP,GACX,OAAOd,KAAKsB,cAAcR,IAG5Bf,EAAAK,UAAAmB,UAAA,SAAUT,GACR,OAAOd,KAAKG,mBAAmBqB,IAAIV,IAG7Bf,EAAAK,UAAAW,uBAAR,SAAkCH,EAAgBL,GAChD,OAAO,IAAIkB,SAAO,SAAKC,EAASC,GAC9Bf,EAAOgB,iBAAiB,WAAS,SAAGC,GAAU,OAAAH,EAAQG,EAAMtB,SAC5DK,EAAOgB,iBAAiB,QAASD,GACjCf,EAAOkB,YAAYvB,OAIfR,EAAAK,UAAAM,qBAAR,SAA6BqB,EAASvB,GACpC,IAAKR,KAAKC,uBAAuB+B,IAAID,GAAK,KAClCtB,EAAMT,KAAKiC,gBAAgBF,EAAIvB,GAErC,OADAR,KAAKC,uBAAuBiB,IAAIa,EAAItB,GAC7BA,EAET,OAAOT,KAAKC,uBAAuBuB,IAAIO,IAGjChC,EAAAK,UAAA6B,gBAAR,SAAwBP,EAA2BlB,OAC3C0B,EAAgBR,EAAQS,WAMxBC,EAAO,IAAIC,KAAK,CALI,oEAEnB7B,EAA8B,GAAhB,eAAkB,KAAK0B,EAAa,gCAGd,CAAEI,KAAM,oBACnD,OAAOC,IAAIC,gBAAgBJ,IAGrBrC,EAAAK,UAAAa,qBAAR,SAAgCH,GAAhC,IAAA2B,EAAAzC,KACE,OAAA,SAAQ6B,GAEN,OADAY,EAAKnB,cAAcR,GACZe,KAIH9B,EAAAK,UAAAkB,cAAR,SAAyBR,OACjBF,EAASZ,KAAKG,mBAAmBqB,IAAIV,GAK3C,OAJIF,GACFA,EAAOS,YAETrB,KAAKG,mBAAmBuC,OAAO5B,GACxBA,uBAvEV6B,EAAAA,aAyED5C,EA7EA","sourcesContent":["import { Injectable } from '@angular/core';\n\ntype CallbackFunction = () => void;\n\n@Injectable()\nexport class WebworkerService {\n  private workerFunctionToUrlMap = new WeakMap<CallbackFunction, string>();\n  private promiseToWorkerMap = new WeakMap<Promise<any>, Worker>();\n\n  run<T>(workerFunction: (input: any) => T, data?: any, enableAsync?: boolean): Promise<T> {\n    const url = this.getOrCreateWorkerUrl(workerFunction, enableAsync);\n    return this.runUrl(url, data);\n  }\n\n  runUrl(url: string, data?: any): Promise<any> {\n    const worker = new Worker(url);\n    const promise = this.createPromiseForWorker(worker, data);\n    const promiseCleaner = this.createPromiseCleaner(promise);\n\n    this.promiseToWorkerMap.set(promise, worker);\n\n    promise.then(promiseCleaner).catch(promiseCleaner);\n\n    return promise;\n  }\n\n  terminate<T>(promise: Promise<T>): Promise<T> {\n    return this.removePromise(promise);\n  }\n\n  getWorker(promise: Promise<any>): Worker {\n    return this.promiseToWorkerMap.get(promise);\n  }\n\n  private createPromiseForWorker<T>(worker: Worker, data: any) {\n    return new Promise<T>((resolve, reject) => {\n      worker.addEventListener('message', (event) => resolve(event.data));\n      worker.addEventListener('error', reject);\n      worker.postMessage(data);\n    });\n  }\n\n  private getOrCreateWorkerUrl(fn: any, enableAsync?: boolean): string {\n    if (!this.workerFunctionToUrlMap.has(fn)) {\n      const url = this.createWorkerUrl(fn, enableAsync);\n      this.workerFunctionToUrlMap.set(fn, url);\n      return url;\n    }\n    return this.workerFunctionToUrlMap.get(fn);\n  }\n\n  private createWorkerUrl(resolve: CallbackFunction, enableAsync?: boolean): string {\n    const resolveString = resolve.toString();\n    const webWorkerTemplate = `\n      self.addEventListener('message', function(e) {\n        ${!enableAsync ? 'postMessage' : ''}((${resolveString})(e.data));\n      });\n    `;\n    const blob = new Blob([webWorkerTemplate], { type: 'text/javascript' });\n    return URL.createObjectURL(blob);\n  }\n\n  private createPromiseCleaner<T>(promise: Promise<T>): (input: any) => T {\n    return (event) => {\n      this.removePromise(promise);\n      return event;\n    };\n  }\n\n  private removePromise<T>(promise: Promise<T>): Promise<T> {\n    const worker = this.promiseToWorkerMap.get(promise);\n    if (worker) {\n      worker.terminate();\n    }\n    this.promiseToWorkerMap.delete(promise);\n    return promise;\n  }\n}\n"]}